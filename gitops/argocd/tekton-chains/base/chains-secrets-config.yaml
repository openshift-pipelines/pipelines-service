apiVersion: v1
kind: Secret
metadata:
  name: chains-ca-cert
  namespace: tekton-chains
type: Opaque
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chains-secrets-admin
  namespace: tekton-chains
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: chains-secret-admin
  namespace: tekton-chains
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - list
      - create
      - get
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-reader
  namespace: ingress # Must be overriden in overlay
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chains-secret-admin
  namespace: tekton-chains
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chains-secret-admin
subjects:
  - kind: ServiceAccount
    name: chains-secrets-admin
    namespace: tekton-chains
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chains-secret-reader
  namespace: ingress # Must be overriden in overlay
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-reader
subjects:
  - kind: ServiceAccount
    name: chains-secrets-admin
    namespace: tekton-chains
---
apiVersion: batch/v1
kind: Job
metadata:
  name: chains-certs-configuration
  namespace: tekton-chains
  annotations:
    argocd.argoproj.io/hook: PostSync
spec:
  template:
    spec:
      containers:
        - image: some/image:tag # Must be overriden in overlay.
          imagePullPolicy: Always
          name: patch-chains-certs
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 30
      serviceAccount: chains-secrets-admin
      serviceAccountName: chains-secrets-admin
---
apiVersion: batch/v1
kind: Job
metadata:
  name: tekton-chains-signing-secret
  namespace: tekton-chains
  annotations:
    argocd.argoproj.io/hook: PostSync
spec:
  template:
    spec:
      containers:
        - name: chains-secret-generation
          image: quay.io/redhat-appstudio/appstudio-utils:eb94f28fe2d7c182f15e659d0fdb66f87b0b3b6b
          imagePullPolicy: Always
          command:
            - /bin/bash
            - -c
            - |
              cd /tmp
              # Once the key-pair has been set it's marked as immutable so it can't be updated.
              # Try to handle that nicely. The object is expected to always exist so check the data.
              SIG_KEY_DATA=$(kubectl get secret signing-secrets -n tekton-chains -o jsonpath='{.data}')
              [[ -n $SIG_KEY_DATA ]] && echo "Signing secret exists." && exit

              # To make this run conveniently without user input let's create a random password
              RANDOM_PASS=$( head -c 12 /dev/urandom | base64 )

              # Generates the key pair secret directly in the cluster.
              env COSIGN_PASSWORD=$RANDOM_PASS cosign generate-key-pair k8s://tekton-chains/signing-secrets
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 30
      serviceAccount: chains-secrets-admin
      serviceAccountName: chains-secrets-admin
